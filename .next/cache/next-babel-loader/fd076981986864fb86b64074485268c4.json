{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { usersTypes } from \"../types/_users\";\nimport { api, apiService } from \"../api_service\";\nexport const getLocalStorageItem = key => {\n  if (process && false) {\n    const entity = localStorage.getItem(\"activeSessionUser\");\n    return entity && JSON.parse(entity);\n  }\n};\nexport const setLocalStorageItem = (key, value) => {\n  if (process && false) {\n    return localStorage.setItem(key, JSON.stringify(value));\n  }\n};\nexport const getActiveSessionUser = params => async dispatch => {\n  try {\n    let response = getLocalStorageItem(\"activeSessionUser\");\n\n    if (!response) {\n      response = await apiService.postData(api.activeSessionUser);\n      setLocalStorageItem(\"activeSessionUser\", response);\n    }\n\n    dispatch({\n      type: usersTypes.POST_USERS_SESSION_ACTIVE_SUCCESS,\n      payload: _objectSpread({}, response)\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};","map":{"version":3,"sources":["C:/Users/obulareddy.reddy/workspace/projects/easyfarm/farmer.accounts.easyfarm.co.in/store/actions/_users.js"],"names":["usersTypes","api","apiService","getLocalStorageItem","key","process","entity","localStorage","getItem","JSON","parse","setLocalStorageItem","value","setItem","stringify","getActiveSessionUser","params","dispatch","response","postData","activeSessionUser","type","POST_USERS_SESSION_ACTIVE_SUCCESS","payload","err","console","log"],"mappings":";;;;;;AAAA,SAASA,UAAT,QAA2B,iBAA3B;AACA,SAASC,GAAT,EAAcC,UAAd,QAAgC,gBAAhC;AAEA,OAAO,MAAMC,mBAAmB,GAAIC,GAAD,IAAS;AAC1C,MAAIC,OAAO,SAAX,EAAgC;AAC9B,UAAMC,MAAM,GAAGC,YAAY,CAACC,OAAb,CAAqB,mBAArB,CAAf;AACA,WAAOF,MAAM,IAAIG,IAAI,CAACC,KAAL,CAAWJ,MAAX,CAAjB;AACD;AACF,CALM;AAOP,OAAO,MAAMK,mBAAmB,GAAG,CAACP,GAAD,EAAMQ,KAAN,KAAgB;AACjD,MAAIP,OAAO,SAAX,EAAgC;AAC9B,WAAOE,YAAY,CAACM,OAAb,CAAqBT,GAArB,EAA0BK,IAAI,CAACK,SAAL,CAAeF,KAAf,CAA1B,CAAP;AACD;AACF,CAJM;AAMP,OAAO,MAAMG,oBAAoB,GAAIC,MAAD,IAAY,MAAOC,QAAP,IAAoB;AAClE,MAAI;AACF,QAAIC,QAAQ,GAAGf,mBAAmB,CAAC,mBAAD,CAAlC;;AACA,QAAI,CAACe,QAAL,EAAe;AACbA,MAAAA,QAAQ,GAAG,MAAMhB,UAAU,CAACiB,QAAX,CAAoBlB,GAAG,CAACmB,iBAAxB,CAAjB;AACAT,MAAAA,mBAAmB,CAAC,mBAAD,EAAsBO,QAAtB,CAAnB;AACD;;AAEDD,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAErB,UAAU,CAACsB,iCADV;AAEPC,MAAAA,OAAO,oBAAOL,QAAP;AAFA,KAAD,CAAR;AAID,GAXD,CAWE,OAAOM,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,CAfM","sourcesContent":["import { usersTypes } from \"../types/_users\";\r\nimport { api, apiService } from \"../api_service\";\r\n\r\nexport const getLocalStorageItem = (key) => {\r\n  if (process && process.browser) {\r\n    const entity = localStorage.getItem(\"activeSessionUser\");\r\n    return entity && JSON.parse(entity);\r\n  }\r\n};\r\n\r\nexport const setLocalStorageItem = (key, value) => {\r\n  if (process && process.browser) {\r\n    return localStorage.setItem(key, JSON.stringify(value));\r\n  }\r\n};\r\n\r\nexport const getActiveSessionUser = (params) => async (dispatch) => {\r\n  try {\r\n    let response = getLocalStorageItem(\"activeSessionUser\");\r\n    if (!response) {\r\n      response = await apiService.postData(api.activeSessionUser);\r\n      setLocalStorageItem(\"activeSessionUser\", response);\r\n    }\r\n\r\n    dispatch({\r\n      type: usersTypes.POST_USERS_SESSION_ACTIVE_SUCCESS,\r\n      payload: { ...response },\r\n    });\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}